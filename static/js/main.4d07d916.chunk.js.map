{"version":3,"sources":["img/arrUp.svg","img/arrDown.svg","bll/mapReducer.ts","components/ChangeButton.tsx","img/elips.svg","components/Map.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["initialState","require","ChangeButton","props","activeButton","activeCountry","dispatch","useDispatch","className","onClick","type","idCountry","id","country","YandexMap","useSelector","state","filter","ct","defaultState","center","mainCoordinates","zoom","city","map","coun","office","of","style","height","geometry","officeCoordinates","options","iconLayout","iconImageHref","elips","iconImageSize","iconImageOffset","hideIconOnBalloonOpen","properties","balloonContentBody","officeName","managerName","tel","email","join","modules","App","onClickOpenCity","cityId","idCity","i","activeCity","src","arrUp","alt","href","arrDown","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","newState","forEach","cl","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d07d916.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/arrUp.8454edae.svg\";","export default __webpack_public_path__ + \"static/media/arrDown.2f551387.svg\";","\r\n\r\nconst initialState = require(\"./../startState/startState.json\")\r\ntype officeType = {\r\n    \"officeName\": string,\r\n    \"managerName\": string,\r\n    \"tel\": string,\r\n    \"email\": string,\r\n    \"officeCoordinates\": number[],\r\n    \"idOffice\": number,\r\n    \"activeOffice\": boolean\r\n}\r\ntype cityType = {\r\n    \"city\": string,\r\n    \"cityCoordinates\": number[],\r\n    \"idCity\": number,\r\n    \"activeCity\": boolean,\r\n    \"office\": officeType[]\r\n}\r\nexport type countryType = {\r\n    \"country\": string,\r\n    \"mainCoordinates\": number[],\r\n    \"zoom\": number,\r\n    \"idCountry\": number,\r\n    \"activeCountry\": boolean,\r\n    \"city\": cityType[]\r\n}\r\nexport type initialStateType = countryType[]\r\n\r\ntype allAcType=changeActiveCountryACType|changeActiveOfficeACType\r\n\r\nexport const mapReducer = (state: initialStateType = initialState, action: allAcType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'CHANGE_ACTIVE_COUNTRY': {\r\n            const newState = [...state]\r\n            newState.forEach((cl) => {\r\n                cl.idCountry === action.idCountry ? cl.activeCountry = true : cl.activeCountry = false\r\n            })\r\n\r\n            return newState\r\n        }\r\n        case \"CHANGE_ACTIVE_OFFICE\": {\r\n\r\n            const newState = [...state]\r\n        newState.forEach(ct=>{\r\n         ct.city.forEach((city)=>{\r\n             if(city.idCity===action.idCity){\r\n                 debugger\r\n                 city.activeCity?city.activeCity=false:city.activeCity=true\r\n             }else{\r\n                 city.activeCity=false\r\n             }\r\n         })\r\n        })\r\n            return newState\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const changeActiveCountryAC = (idCountry: number) => ({type: \"CHANGE_ACTIVE_COUNTRY\", idCountry} as const)\r\nexport type changeActiveCountryACType = ReturnType<typeof changeActiveCountryAC>\r\n\r\nexport const changeActiveOfficeAC = (idCity: number) => ({type: \"CHANGE_ACTIVE_OFFICE\", idCity} as const)\r\nexport type changeActiveOfficeACType = ReturnType<typeof changeActiveOfficeAC>\r\n","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeActiveCountryAC} from \"../bll/mapReducer\";\r\n\r\ntype changeButtonPropsType={\r\n    activeCountry:boolean,\r\n    country:string\r\n    id:number\r\n}\r\nexport const ChangeButton=(props:changeButtonPropsType)=>{\r\n    const activeButton=props.activeCountry?\"main__button--active\":\"\"\r\n    const dispatch=useDispatch()\r\n    const OnButtonChangeActive=()=>{\r\ndispatch(changeActiveCountryAC(props.id))\r\n    }\r\n    return(\r\n        <button  className={\"main__button\" +\" \" + activeButton}   onClick={OnButtonChangeActive}>{props.country} </button>\r\n)}\r\n","export default __webpack_public_path__ + \"static/media/elips.13321af6.svg\";","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {countryType} from \"../bll/mapReducer\";\r\nimport {Placemark, YMaps, Map} from \"react-yandex-maps\";\r\nimport elips from '.././img/elips.svg';\r\nimport {AppRootStateType} from \"../bll/store\";\r\n\r\n\r\nexport const YandexMap = () => {\r\n    const activeCountry = useSelector<AppRootStateType, countryType>(country => country.state.filter(ct => ct.activeCountry)[0])\r\n\r\n    return (\r\n        <YMaps >\r\n            <div className={\"wrapper_map\"}>\r\n                <Map  className={\"YMap\"} defaultState={{center: activeCountry.mainCoordinates, zoom: activeCountry.zoom}}>{/* 1)проблема с переререндором*/}\r\n                    {/*                                <Clusterer\r\n                                    options={{\r\n                                        groupByCoordinates: false,\r\n                                        clusterIcons: [\r\n                                            {\r\n                                                size: [40, 40],\r\n                                                offset: [-20, -20],\r\n                                                href: elips\r\n                                            }\r\n                                        ],\r\n                                    }}\r\n                                ><<<< 2)неработает перерисовка в Ymaps Кластеров пытался и принудительно перерендерить через роуты, через кнопку*/}\r\n                    {activeCountry.city.map((coun) => coun.office.map((of) => {\r\n                        return <Placemark style={{height: 1000}} geometry={of.officeCoordinates}\r\n                                          options={\r\n                                              {\r\n                                                  iconLayout: 'default#image',\r\n                                                  iconImageHref: elips,\r\n                                                  iconImageSize: [30, 40],\r\n                                                  iconImageOffset: [-15, -10],\r\n                                                  hideIconOnBalloonOpen: false\r\n                                              }\r\n                                          }\r\n                                          properties={\r\n                                              {\r\n                                                  balloonContentBody: [\r\n                                                      `<div class=\"baloon-content\">\r\n                                                <h2 class=\"baloon-header\">${of.officeName}</h2>\r\n                                                <p class=\"baloon-paragraph\">${of.managerName}</p>\r\n                                                <p class=\"baloon-paragraph\">${of.tel}</p>\r\n                                                <a class=\"baloon-email\" href=${of.email}>${of.email}</a>\r\n                                            </div>`,\r\n                                                  ].join(\"\")\r\n                                              }}\r\n                                          modules={['geoObject.addon.balloon']}\r\n\r\n                        />\r\n                    }))}\r\n                    {/*</Clusterer>*/}\r\n                </Map>\r\n            </div>\r\n        </YMaps>)\r\n}\r\n","import React from 'react';\nimport arrUp from './img/arrUp.svg';\nimport arrDown from './img/arrDown.svg';\n\nimport './App.scss';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./bll/store\";\nimport {changeActiveOfficeAC, countryType, initialStateType} from \"./bll/mapReducer\";\nimport {ChangeButton} from \"./components/ChangeButton\";\nimport {YandexMap} from \"./components/Map\";\n\nfunction App() {\n    const state = useSelector<AppRootStateType, initialStateType>(state => state.state)\n    const activeCountry = useSelector<AppRootStateType, countryType>(country => country.state.filter(ct => ct.activeCountry)[0])\n    const dispatch = useDispatch()\n    const onClickOpenCity = (cityId: number) => {\n        dispatch(changeActiveOfficeAC(cityId))\n    }\n    return (\n        <div className={\"main\"}>\n            <div>\n                    <div className={\"buttonBlock\"}>\n                    {state.map((ct, i) => {\n                        return <ChangeButton key={i} id={ct.idCountry} activeCountry={ct.activeCountry}\n                                             country={ct.country}/>\n                    })}</div>\n                    <div className={\"cityBlock\"}>\n                        {activeCountry.city.map((ct, i) => {\n                            if (ct.activeCity) {\n                                return <div key={i}>\n                                    <div className={\"mainCityHeader\"} onClick={() => onClickOpenCity(ct.idCity)}>\n                                        <h2 className={\"city__name\"}>{ct.city}</h2>\n                                        <img className={\"city__arrow\"}\n                                             src={arrUp}\n                                             alt=\"вкл стрелка\"/></div>\n                                    {ct.office.map((of, i) => {\n                                        return <div key={i}>\n                                            <h3 className={\"city__office\"}>{of.officeName}</h3>\n                                            <p className={\"city__managerName\"}>{of.managerName}</p>\n                                            <p className={\"city__tel\"}>{of.tel}</p>\n                                            <a className={\"city__email\"} href={of.email}>{of.email}</a>\n                                        </div>\n                                    })}\n                                </div>\n                            } else {\n                                return <div className={\"mainCityHeader\"} onClick={() => onClickOpenCity(ct.idCity)}\n                                            key={i}>\n                                    <h2 className={\"city__name\"+\" \"+\"city__name--no-active\"}>{ct.city}</h2>\n\n                                    <img className={\"city__arrow\"} src={arrDown}\n                                         alt=\"выкл стрелка\"/></div>\n                            }\n                        })}\n                    </div>\n\n            </div>\n            <div>\n                <YandexMap/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport { combineReducers, createStore} from 'redux';\r\nimport {mapReducer} from \"./mapReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    state: mapReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n<HashRouter>\n      <Provider store={store}>\n    <App />\n      </Provider>\n</HashRouter>\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}